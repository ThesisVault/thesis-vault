generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  emailVerified    DateTime?
  image            String
  isSuperAdmin     Boolean        @default(false)
  allowPermissions Int            @default(0)
  denyPermissions  Int            @default(0)
  roleId           String?
  role             Role?          @relation(fields: [roleId], references: [id])
  isDeleted        Boolean        @default(false)
  deletedAt        DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  thesis           Thesis[]       @relation("ThesisAuthors")
  sessions         Session[]
  accounts         Account[]
  auditLog         UserAuditLog[]
}

model Role {
  id          String    @id @default(uuid())
  name        String
  permissions Int
  color       String    @default("#FFFFFF")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  users       User[]    @relation
}

model UserAuditLog {
  id          String   @id @default(uuid())
  type        String
  description String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Thesis {
  id         String           @id
  abstract   String
  authors    User[]           @relation("ThesisAuthors")
  categories String[]
  auditLog   ThesisAuditLog[]
  isDeleted  Boolean          @default(false)
  deletedAt  DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model ThesisAuditLog {
  id       String @id @default(uuid())
  thesisId String
  thesis   Thesis @relation(fields: [thesisId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookTransactions         BookTransaction[]
}

model Book {
  id              String   @id @default(cuid())
  title           String
  author          String
  isbn            String   @unique
  publishedYear   Int
  copiesAvailable Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookTransaction        BookTransaction[]
}

model BookTransaction {
  id         String   @id @default(cuid())
  userId     String
  bookId     String
  loanDate   DateTime @default(now())
  dueDate    DateTime
  returnDate DateTime?
  fine       Fine?
  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Fine {
  id        String   @id @default(cuid())
  userId    String
  bookTransactionId    String   @unique
  amount    Float
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())

  bookTransaction BookTransaction @relation(fields: [bookTransactionId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}